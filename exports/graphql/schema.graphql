type Configuration {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  websiteName: String
  websiteDescription: String
  profilePicture: UploadFile
  websiteLogo: UploadFile
}

type ConfigurationAggregator {
  count: Int
  totalCount: Int
}

type ConfigurationConnection {
  values: [Configuration]
  groupBy: ConfigurationGroupBy
  aggregate: ConfigurationAggregator
}

type ConfigurationConnectionCreated_at {
  key: DateTime
  connection: ConfigurationConnection
}

type ConfigurationConnectionId {
  key: ID
  connection: ConfigurationConnection
}

type ConfigurationConnectionProfilePicture {
  key: ID
  connection: ConfigurationConnection
}

type ConfigurationConnectionUpdated_at {
  key: DateTime
  connection: ConfigurationConnection
}

type ConfigurationConnectionWebsiteDescription {
  key: String
  connection: ConfigurationConnection
}

type ConfigurationConnectionWebsiteLogo {
  key: ID
  connection: ConfigurationConnection
}

type ConfigurationConnectionWebsiteName {
  key: String
  connection: ConfigurationConnection
}

type ConfigurationGroupBy {
  id: [ConfigurationConnectionId]
  created_at: [ConfigurationConnectionCreated_at]
  updated_at: [ConfigurationConnectionUpdated_at]
  websiteName: [ConfigurationConnectionWebsiteName]
  websiteDescription: [ConfigurationConnectionWebsiteDescription]
  profilePicture: [ConfigurationConnectionProfilePicture]
  websiteLogo: [ConfigurationConnectionWebsiteLogo]
}

input ConfigurationInput {
  websiteName: String
  websiteDescription: String
  profilePicture: ID
  websiteLogo: ID
}

input createConfigurationInput {
  data: ConfigurationInput
}

type createConfigurationPayload {
  configuration: Configuration
}

input createPaintingInput {
  data: PaintingInput
}

type createPaintingPayload {
  painting: Painting
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteConfigurationInput {
  where: InputID
}

type deleteConfigurationPayload {
  configuration: Configuration
}

input deletePaintingInput {
  where: InputID
}

type deletePaintingPayload {
  painting: Painting
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editConfigurationInput {
  websiteName: String
  websiteDescription: String
  profilePicture: ID
  websiteLogo: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editPaintingInput {
  title: String
  description: String
  published: Date
  sold: Boolean
  photo: [ID]
  price: Float
  Pinned: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Configuration | ConfigurationConnection | ConfigurationAggregator | ConfigurationGroupBy | ConfigurationConnectionId | ConfigurationConnectionCreated_at | ConfigurationConnectionUpdated_at | ConfigurationConnectionWebsiteName | ConfigurationConnectionWebsiteDescription | ConfigurationConnectionProfilePicture | ConfigurationConnectionWebsiteLogo | createConfigurationPayload | updateConfigurationPayload | deleteConfigurationPayload | Painting | PaintingConnection | PaintingAggregator | PaintingAggregatorSum | PaintingAggregatorAvg | PaintingAggregatorMin | PaintingAggregatorMax | PaintingGroupBy | PaintingConnectionId | PaintingConnectionCreated_at | PaintingConnectionUpdated_at | PaintingConnectionTitle | PaintingConnectionDescription | PaintingConnectionPublished | PaintingConnectionSold | PaintingConnectionPrice | PaintingConnectionPinned | createPaintingPayload | updatePaintingPayload | deletePaintingPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createConfiguration(input: createConfigurationInput): createConfigurationPayload
  updateConfiguration(input: updateConfigurationInput): updateConfigurationPayload
  deleteConfiguration(input: deleteConfigurationInput): deleteConfigurationPayload
  createPainting(input: createPaintingInput): createPaintingPayload
  updatePainting(input: updatePaintingInput): updatePaintingPayload
  deletePainting(input: deletePaintingInput): deletePaintingPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Painting {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  published: Date
  sold: Boolean
  price: Float
  Pinned: Boolean
  photo(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type PaintingAggregator {
  count: Int
  totalCount: Int
  sum: PaintingAggregatorSum
  avg: PaintingAggregatorAvg
  min: PaintingAggregatorMin
  max: PaintingAggregatorMax
}

type PaintingAggregatorAvg {
  price: Float
}

type PaintingAggregatorMax {
  price: Float
}

type PaintingAggregatorMin {
  price: Float
}

type PaintingAggregatorSum {
  price: Float
}

type PaintingConnection {
  values: [Painting]
  groupBy: PaintingGroupBy
  aggregate: PaintingAggregator
}

type PaintingConnectionCreated_at {
  key: DateTime
  connection: PaintingConnection
}

type PaintingConnectionDescription {
  key: String
  connection: PaintingConnection
}

type PaintingConnectionId {
  key: ID
  connection: PaintingConnection
}

type PaintingConnectionPinned {
  key: Boolean
  connection: PaintingConnection
}

type PaintingConnectionPrice {
  key: Float
  connection: PaintingConnection
}

type PaintingConnectionPublished {
  key: ID
  connection: PaintingConnection
}

type PaintingConnectionSold {
  key: Boolean
  connection: PaintingConnection
}

type PaintingConnectionTitle {
  key: String
  connection: PaintingConnection
}

type PaintingConnectionUpdated_at {
  key: DateTime
  connection: PaintingConnection
}

type PaintingGroupBy {
  id: [PaintingConnectionId]
  created_at: [PaintingConnectionCreated_at]
  updated_at: [PaintingConnectionUpdated_at]
  title: [PaintingConnectionTitle]
  description: [PaintingConnectionDescription]
  published: [PaintingConnectionPublished]
  sold: [PaintingConnectionSold]
  price: [PaintingConnectionPrice]
  Pinned: [PaintingConnectionPinned]
}

input PaintingInput {
  title: String
  description: String
  published: Date
  sold: Boolean
  photo: [ID]
  price: Float
  Pinned: Boolean
}

type Query {
  configuration(id: ID!): Configuration
  configurations(sort: String, limit: Int, start: Int, where: JSON): [Configuration]
  configurationsConnection(sort: String, limit: Int, start: Int, where: JSON): ConfigurationConnection
  painting(id: ID!): Painting
  paintings(sort: String, limit: Int, start: Int, where: JSON): [Painting]
  paintingsConnection(sort: String, limit: Int, start: Int, where: JSON): PaintingConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateConfigurationInput {
  where: InputID
  data: editConfigurationInput
}

type updateConfigurationPayload {
  configuration: Configuration
}

input updatePaintingInput {
  where: InputID
  data: editPaintingInput
}

type updatePaintingPayload {
  painting: Painting
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
